// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: wallet.sql

package db

import (
	"context"
)

const addBalanceToWallet = `-- name: AddBalanceToWallet :one
UPDATE wallets
SET balance = balance + $1
WHERE id = $2
RETURNING id, type, full_name, document, email, password, balance, created_at
`

type AddBalanceToWalletParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddBalanceToWallet(ctx context.Context, arg AddBalanceToWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, addBalanceToWallet, arg.Amount, arg.ID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.FullName,
		&i.Document,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (type, full_name, document, email, password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, type, full_name, document, email, password, balance, created_at
`

type CreateWalletParams struct {
	Type     string `json:"type"`
	FullName string `json:"full_name"`
	Document string `json:"document"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet,
		arg.Type,
		arg.FullName,
		arg.Document,
		arg.Email,
		arg.Password,
	)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.FullName,
		&i.Document,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getWallet = `-- name: GetWallet :one
SELECT id, type, full_name, document, email, password, balance, created_at FROM wallets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, id int64) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWallet, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.FullName,
		&i.Document,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getWalletForUpdate = `-- name: GetWalletForUpdate :one
SELECT id, type, full_name, document, email, password, balance, created_at FROM wallets
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetWalletForUpdate(ctx context.Context, id int64) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletForUpdate, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.FullName,
		&i.Document,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateWallet = `-- name: UpdateWallet :one
UPDATE wallets
SET balance = $2
WHERE id = $1
RETURNING id, type, full_name, document, email, password, balance, created_at
`

type UpdateWalletParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateWallet, arg.ID, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.FullName,
		&i.Document,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}
